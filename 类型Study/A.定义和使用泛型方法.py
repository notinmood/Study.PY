"""
 * @file   : A.定义和使用泛型方法.py
 * @time   : 22:20
 * @date   : 2024/1/9
 * @mail   : 9727005@qq.com
 * @creator: ShanDong Xiedali
 * @company: HiLand & RainyTop
"""
from typing import TypeVar

# +--------------------------------------------------------------------------
# |::::TIPS::::| 定义泛型方法的两种方式说明
# ---------------------------------------------------------------------------
# 1. 不在方法名称后面使用[T]。这种方式需要提前定义好泛型类型参数
# 2. 直接在方法名称后面使用[T]。这种方式不需要提前定义好泛型类型参数
# +--------------------------------------------------------------------------


T = TypeVar("T")


# 1. 定义泛型方法的方式1，需要提前定义好泛型类型参数
def my_print(data: T) -> T:
    print(f"传入的参数类型为：{type(data)}")
    print(f"传入的参数数值为：{data}")
    return data


# 2. 定义泛型方法的方式2，不需要提前定义泛型类型，可以直接使用泛型类型参数
def my_func[S](arg_name: S) -> S:
    print(f"传入的参数类型为：{type(arg_name)}")
    print(f"传入的参数数值为：{arg_name}")
    return arg_name


pass

if __name__ == '__main__':
    my_print("Hello World")
    print("──分割线───────────────────────────────────")
    my_print(123)
    print("──分割线───────────────────────────────────")
    my_print(12.34)
    print("──分割线───────────────────────────────────")
    print("──分割线───────────────────────────────────")
    print(my_func("Hello World"))
