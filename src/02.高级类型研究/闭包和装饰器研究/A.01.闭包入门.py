"""
 * @file   : A.01.闭包入门.py
 * @time   : 12:59
 * @date   : 2024/2/8
 * @mail   : 9727005@qq.com
 * @creator: ShanDong Xiedali
 * @company: HiLand & RainyTop
"""

# +--------------------------------------------------------------------------
# |::::TIPS::::| 对闭包的需求
# ---------------------------------------------------------------------------
#  通常情况下：一个函数可以使用本函数外部所在环境内的变量；但，也是因为作用域的问题，
#  函数外部是无法使用函数内部变量的。为了解决这个问题，出现了闭包这种方式。
# +--------------------------------------------------------------------------

# +--------------------------------------------------------------------------
# |::::TIPS::::| 闭包的定义与使用
# ---------------------------------------------------------------------------
# 闭包是一个内部函数，使用了外部函数的变量，并且外部函数的返回值是内部函数。
# 1. 首先需要有双层函数。
# 2. 内部函数使用了外部函数的变量。
# 3. 外部函数的返回值是内部函数。
# 4. 在客户代码中，调用外部函数，此时可得到内部函数的定义（姑且称之为fn）。
# 5. 在客户代码中，调用内部函数（fn()），此时可得到定义在外部函数中的变量。
# +--------------------------------------------------------------------------

def outer_func():
    """
    闭包容器的外部函数
    :return:
    """
    my_var: int = 1

    def inner_func():
        return my_var

    pass

    return inner_func


if __name__ == '__main__':
    my_func = outer_func()
    print(my_func)  # <function outer_func.<locals>.inner_func at 0x0000021F1577FBA0>
    print(my_func())  # 1
pass
